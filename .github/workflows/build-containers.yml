name: build-containers

on:
  push:
    tags: ['v*.*.*']
    branches: ['master']
    paths: ['FileServer**', 'Directory.Build.props', '.editorconfig', 'global.json', '.github/workflows/build-containers.yml']
  pull_request:
    branches: ['master']
    paths: ['FileServer**', 'Directory.Build.props', '.editorconfig', 'global.json', '.github/workflows/build-containers.yml']

concurrency: # head_ref is only defined on pull_request events, run_id is unique for each workflow run
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_NAME_APP: fileserver_app
  IMAGE_NAME_TESTS: fileserver_tests
  IMAGE_NAME_E2ETESTS: fileserver_e2etests

jobs:
  build-containers:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set vars
        id: vars
        shell: bash
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"
          [ "${tag_version:0:5}" == "refs/" ] && app_version='1.0.0' || app_version="$tag_version"
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          echo "sanitized_ref=${GITHUB_REF//\//-}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./FileServer/Dockerfile
          load: false
          push: false
          target: tests
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.app_version }}
          tags: ${{ env.IMAGE_NAME_TESTS }}:${{ steps.vars.outputs.sanitized_ref }}

      - name: Run e2etests
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./FileServer.E2ETests/Dockerfile
          load: false
          push: false
          target: e2etests
          tags: ${{ env.IMAGE_NAME_E2ETESTS }}:${{ steps.vars.outputs.sanitized_ref }}

      - name: Build all platforms
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./FileServer/Dockerfile
          load: false
          push: false
          target: app
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.app_version }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ env.IMAGE_NAME_APP }}:${{ steps.vars.outputs.sanitized_ref }}

      - name: Extract docker metadata
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_NAMESPACE }}/${{ vars.DOCKERHUB_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag all platforms from build cache and push
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./FileServer/Dockerfile
          load: false
          push: true
          target: app
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.app_version }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
